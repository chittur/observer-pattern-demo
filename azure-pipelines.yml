trigger:
- main

pool:
  name: RamAgentPool

variables:
  buildConfiguration: 'Release'
  coverageThreshold: '80'

steps:
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK 6.0'
  inputs:
    packageType: 'sdk'
    version: '6.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: DotNetCoreCLI@2
  displayName: 'Restore NuGet Packages'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build Solution'
  inputs:
    command: 'build'
    projects: '**/*.sln'
    arguments: '--configuration $(buildConfiguration)'

- powershell: |
    $dotnetFormat = dotnet tool list -g | Select-String 'dotnet-format'
    if (-not $dotnetFormat) {
      dotnet tool install -g dotnet-format
    }
    $env:PATH += ';' + [System.Environment]::GetFolderPath('UserProfile') + '\.dotnet\tools'
  displayName: 'Ensure dotnet-format is installed and add to PATH'

- powershell: |
    dotnet format --verify-no-changes
  displayName: 'Run .editorconfig checks'
  continueOnError: false # This will fail the pipeline if there are any formatting issues

- task: DotNetCoreCLI@2
  displayName: 'Run Unit Tests with Coverage'
  inputs:
    command: 'test'
    projects: '**/*Tests/*.csproj'
    arguments: '--configuration $(buildConfiguration) --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/'

- powershell: |
    Invoke-WebRequest -Uri https://github.com/danielpalme/ReportGenerator/releases/download/v4.8.12/ReportGenerator.zip -OutFile ReportGenerator.zip
    Expand-Archive -Path ReportGenerator.zip -DestinationPath $(Build.SourcesDirectory)/reportgenerator
  displayName: 'Download and Extract ReportGenerator'

- powershell: |
    $(Build.SourcesDirectory)/reportgenerator/ReportGenerator.exe -reports:$(Build.SourcesDirectory)/TestResults/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:Html
  displayName: 'Generate Code Coverage Report'

- powershell: |
    [xml]$summary = Get-Content $(Build.SourcesDirectory)/CodeCoverage/Summary.xml
    $coverage = $summary.coverage.line-rate
    $coverageValue = [math]::Round(($coverage -replace '%',''))
    if ($coverageValue -lt $(coverageThreshold)) {
      Write-Host "##vso[task.logissue type=warning]Code coverage ($coverageValue%) is below the threshold ($(coverageThreshold)%)"
    } else {
      Write-Host "Code coverage ($coverageValue%) is above the threshold ($(coverageThreshold)%)"
    }
  displayName: 'Check Code Coverage Threshold'
