trigger:
- main

pool:
  name: RamAgentPool

variables:
  buildConfiguration: 'Release'
  coverageThreshold: '80'
  coverageFilePath: '$(Build.SourcesDirectory)\\TestResults\\coverage\\coverage.cobertura.xml'

steps:
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK 8.0'
  inputs:
    packageType: 'sdk'
    version: '8.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

- script: |
    dotnet add **/*Tests/*.csproj package coverlet.msbuild
  displayName: 'Add Coverlet to Test Projects'

- task: DotNetCoreCLI@2
  displayName: 'Restore NuGet Packages'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build Solution'
  inputs:
    command: 'build'
    projects: '**/*.sln'
    arguments: '--configuration $(buildConfiguration)'

- powershell: |
    dotnet format --verify-no-changes
  displayName: 'Run .editorconfig checks'
  continueOnError: false # This will fail the pipeline if there are any formatting issues

- powershell: |
    New-Item -ItemType Directory -Force -Path $(Build.SourcesDirectory)\\TestResults\\coverage
  displayName: 'Create Coverage Directory'

- task: DotNetCoreCLI@2
  displayName: 'Run Unit Tests with Coverage'
  inputs:
    command: 'test'
    projects: '**/*Tests/*.csproj'
    arguments: '--configuration $(buildConfiguration) --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(coverageFilePath)'
  continueOnError: false

- powershell: |
    Write-Host "Checking if the coverage file exists..."
    if (Test-Path $(coverageFilePath)) {
      Write-Host "Coverage file found: $(coverageFilePath)"
    } else {
      Write-Host "Coverage file not found at: $(coverageFilePath)"
    }
    Get-ChildItem -Path $(Build.SourcesDirectory)\\TestResults\\coverage -Recurse
  displayName: 'Log Coverage Directory Contents'

- powershell: |
    $reportGenerator = dotnet tool list -g | Select-String 'dotnet-reportgenerator-globaltool'
    if (-not $reportGenerator) {
      dotnet tool install --global dotnet-reportgenerator-globaltool
    }
    $env:PATH += ';' + [System.Environment]::GetFolderPath('UserProfile') + '\\.dotnet\\tools'
  displayName: 'Ensure ReportGenerator is installed and add to PATH'

- powershell: |
    if (Test-Path $(coverageFilePath)) {
      reportgenerator -reports:$(coverageFilePath) -targetdir:$(Build.SourcesDirectory)\\CodeCoverage -reporttypes:Html
    } else {
      Write-Host "##vso[task.logissue type=error]Coverage file not found: $(coverageFilePath)"
      exit 1
    }
  displayName: 'Generate Code Coverage Report'

- powershell: |
    [xml]$summary = Get-Content $(Build.SourcesDirectory)\\CodeCoverage\\Summary.xml
    $coverage = $summary.coverage.'line-rate'
    $coverageValue = [math]::Round(($coverage -replace '%',''))
    if ($coverageValue -lt $(coverageThreshold)) {
      Write-Host "##vso[task.logissue type=warning]Code coverage ($coverageValue%) is below the threshold ($(coverageThreshold)%)"
    } else {
      Write-Host "Code coverage ($coverageValue%) is above the threshold ($(coverageThreshold)%)"
    }
  displayName: 'Check Code Coverage Threshold'
